package generator

import (
	"bytes"
	"fmt"
	"strings"
	"time"

	"nexvul/configs"
	"nexvul/tasks"
	"nexvul/utils"

	"github.com/go-pdf/fpdf"
)

func GeneratePDF(sites []tasks.SiteAnalysis, wordlist string, subdomains []tasks.SubdomainInfo) ([]byte, error) {
	if err := utils.DownloadFontIfNeeded(); err != nil {
		return nil, fmt.Errorf("font download error: %w", err)
	}

	pdf := fpdf.New("P", "mm", "A4", "")
	pdf.SetTitle("Security Headers Report", false)
	pdf.SetAuthor(configs.ProductName, false)
	pdf.SetCreator(configs.ProductName, false)

	pdf.AddPage()

	const logoWidth = 40.0
	pageWidth, _ := pdf.GetPageSize()
	logoX := (pageWidth - logoWidth) / 2

	pdf.ImageOptions(
		configs.LogoPath,
		logoX, 5, logoWidth, 0,
		false,
		fpdf.ImageOptions{ImageType: "PNG", ReadDpi: true},
		0, "",
	)

	pdf.Ln(36)

	pdf.SetMargins(10, 15, 10)
	pdf.SetAutoPageBreak(true, 15)
	pdf.AddUTF8Font("Roboto", "", configs.FontPath)
	pdf.SetFont("Roboto", "", 10)

	pdf.SetFillColor(16, 19, 25)
	pdf.SetTextColor(255, 255, 255)
	pdf.CellFormat(0, 10, "Security Headers Report", "", 1, "C", true, 0, "")
	pdf.Ln(5)

	pdf.SetFillColor(16, 19, 25)
	pdf.CellFormat(0, 10, "Generated by "+configs.ProductName, "", 1, "C", true, 0, "")
	pdf.Ln(10)

	pdf.SetTextColor(10, 15, 10)

	pdf.SetFont("Roboto", "", 10)
	pdf.Cell(0, 10, fmt.Sprintf("Generated on: %s", time.Now().Format("2006-01-02 15:04:05")))
	pdf.Ln(8)

	pdf.SetFont("Roboto", "", 10)
	pdf.Cell(0, 10, fmt.Sprintf("Total Sites Analyzed: %d", len(sites)))
	pdf.Ln(8)

	pdf.SetFont("Roboto", "", 10)
	var totalExecutionTime int64
	for _, site := range sites {
		totalExecutionTime += site.ExecutionTime.Milliseconds()
	}
	pdf.Cell(0, 10, fmt.Sprintf("Total execution time: %d ms", totalExecutionTime))

	if wordlist != "" {
		pdf.Ln(8)
		pdf.WriteLinkString(10, fmt.Sprintf("Wordlist: %s", wordlist), wordlist)
		pdf.Ln(8)
	}

	pdf.SetFooterFunc(func() {
		pdf.SetY(-15)
		pdf.SetFont("Roboto", "", 8)
		pdf.CellFormat(0, 10,
			fmt.Sprintf("Generated at %s — Page %d",
				time.Now().Format("2006-01-02 15:04:05"),
				pdf.PageNo()),
			"", 0, "C", false, 0, "")
	})

	for _, site := range sites {
		pdf.AddPage()

		pdf.SetFont("Roboto", "", 12)
		pdf.SetFillColor(16, 19, 25)
		pdf.SetTextColor(255, 255, 255)
		pdf.CellFormat(0, 10, "Basic Information", "", 1, "L", true, 0, "")
		pdf.SetTextColor(10, 15, 10)
		pdf.Ln(4)

		pdf.SetFont("Roboto", "", 10)
		pdf.SetTextColor(0, 0, 0)

		pdf.SetFont("Roboto", "", 10)
		pdf.Cell(0, 8, utils.SanitizeText(fmt.Sprintf("Site: %s", site.URL)))
		pdf.Ln(8)

		if site.Server != "" {
			pdf.Cell(0, 8, utils.SanitizeText(fmt.Sprintf("Server: %s", site.Server)))
			pdf.Ln(8)
		}

		if site.ContentType != "" {
			pdf.Cell(0, 8, utils.SanitizeText(fmt.Sprintf("Content-Type: %s", site.ContentType)))
			pdf.Ln(8)
		}

		if site.StatusCode != 0 {
			pdf.Cell(0, 8, utils.SanitizeText(fmt.Sprintf("HTTP Status: %d", site.StatusCode)))
			pdf.Ln(8)
		}

		pdf.Cell(0, 8, utils.SanitizeText(fmt.Sprintf("Security Score: %d%%", site.SecurityScore)))
		pdf.Ln(8)

		pdf.Cell(0, 8, fmt.Sprintf("Execution time: %d ms", site.ExecutionTime.Milliseconds()))
		pdf.Ln(8)

		pdf.AddPage()

		pdf.SetFont("Roboto", "", 12)
		pdf.SetFillColor(16, 19, 25)
		pdf.SetTextColor(255, 255, 255)
		pdf.CellFormat(0, 10, "Headers Analysis", "", 1, "L", true, 0, "")
		pdf.SetTextColor(10, 15, 10)
		pdf.Ln(4)

		pdf.SetFont("Roboto", "", 11)
		pdf.SetFillColor(230, 230, 230)
		pdf.CellFormat(70, 8, "Header", "1", 0, "", true, 0, "")
		pdf.CellFormat(30, 8, "Status", "1", 0, "", true, 0, "")
		pdf.CellFormat(90, 8, "Note", "1", 1, "", true, 0, "")
		pdf.SetFont("Roboto", "", 10)

		for _, res := range site.Results {
			x := pdf.GetX()
			y := pdf.GetY()

			note := utils.SanitizeText(res.Note)
			noteLines := pdf.SplitLines([]byte(note), 90)
			lineHeight := float64(6)
			rowHeight := float64(len(noteLines)) * lineHeight

			pdf.Rect(x, y, 70, rowHeight, "")
			pdf.MultiCell(70, lineHeight, utils.SanitizeText(res.Header), "", "", false)
			pdf.SetXY(x+70, y)

			pdf.Rect(x+70, y, 30, rowHeight, "")
			pdf.MultiCell(30, lineHeight, utils.SanitizeText(res.Status), "", "", false)
			pdf.SetXY(x+100, y)

			pdf.Rect(x+100, y, 90, rowHeight, "")
			pdf.MultiCell(90, lineHeight, note, "", "", false)

			pdf.SetY(y + rowHeight)
		}

		if len(site.Recommendations) > 0 {
			pdf.Ln(4)
			pdf.SetFont("Roboto", "", 12)
			pdf.SetFillColor(16, 19, 25)
			pdf.SetTextColor(255, 255, 255)
			pdf.CellFormat(0, 10, "Recommendations", "", 1, "L", true, 0, "")
			pdf.SetTextColor(10, 15, 10)
			pdf.Ln(4)

			pdf.SetFont("Roboto", "", 10)
			for _, rec := range site.Recommendations {
				pdf.MultiCell(0, 5, "• "+utils.SanitizeText(rec), "", "", false)
			}
		}

		pdf.Ln(4)
		pdf.SetFont("Roboto", "", 12)
		pdf.SetFillColor(16, 19, 25)
		pdf.SetTextColor(255, 255, 255)
		pdf.CellFormat(0, 10, "Subdomains", "", 1, "L", true, 0, "")
		pdf.SetTextColor(10, 15, 10)
		pdf.Ln(4)

		for _, rec := range subdomains {
			siteDomain := site.URL
			siteDomain = strings.ReplaceAll(siteDomain, "https://", "")
			siteDomain = strings.ReplaceAll(siteDomain, "http://", "")

			if rec.Domain == siteDomain {
				pdf.MultiCell(0, 5, "• "+utils.SanitizeText(rec.Subdomain), "", "", false)
			}
		}
	}

	var buf bytes.Buffer
	if err := pdf.Output(&buf); err != nil {
		return nil, fmt.Errorf("failed to output PDF: %w", err)
	}

	return buf.Bytes(), nil
}
